// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using dentalhub_api.Models;

#nullable disable

namespace dentalhub_api.Migrations
{
    [DbContext(typeof(DentalhubContext))]
    [Migration("20240626030716_UpdateMigrations")]
    partial class UpdateMigrations
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("dentalhub_api.Models.Address", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int?>("Id"));

                    b.Property<string>("Cep")
                        .HasColumnType("text");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("District")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Telephone")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Uf")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Addresses");
                });

            modelBuilder.Entity("dentalhub_api.Models.Admin", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int?>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<int?>("ID")
                        .HasColumnType("integer");

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Admins");
                });

            modelBuilder.Entity("dentalhub_api.Models.Affiliated", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int?>("Id"));

                    b.Property<int?>("AnamneseId")
                        .HasColumnType("integer");

                    b.Property<int?>("AtmId")
                        .HasColumnType("integer");

                    b.Property<string>("Cpf")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<bool?>("IsTeacher")
                        .HasColumnType("boolean");

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Registry")
                        .HasColumnType("text");

                    b.Property<int?>("ScreeningId")
                        .HasColumnType("integer");

                    b.Property<string>("Telephone")
                        .HasColumnType("text");

                    b.Property<int?>("TreatmentId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("AnamneseId");

                    b.HasIndex("AtmId");

                    b.HasIndex("ScreeningId");

                    b.HasIndex("TreatmentId");

                    b.ToTable("Affiliateds");
                });

            modelBuilder.Entity("dentalhub_api.Models.Anamnese", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int?>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("CurrentValidationId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("EndedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Index")
                        .HasColumnType("text");

                    b.Property<int?>("PatientId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CurrentValidationId");

                    b.HasIndex("PatientId");

                    b.ToTable("Anamneses");
                });

            modelBuilder.Entity("dentalhub_api.Models.AnamneseAnswer", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int?>("Id"));

                    b.Property<int?>("AnamneseId")
                        .HasColumnType("integer");

                    b.Property<string>("Content")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool?>("Highlight")
                        .HasColumnType("boolean");

                    b.Property<string>("Question")
                        .HasColumnType("text");

                    b.Property<int?>("ValidationId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("AnamneseId");

                    b.HasIndex("ValidationId");

                    b.ToTable("AnamneseAnswers");
                });

            modelBuilder.Entity("dentalhub_api.Models.AnamneseValidation", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int?>("Id"));

                    b.Property<int>("AnamneseId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Feedback")
                        .HasColumnType("text");

                    b.Property<int?>("Status")
                        .HasColumnType("integer");

                    b.Property<int>("StudentId")
                        .HasColumnType("integer");

                    b.Property<int>("TeacherId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("AnamneseId");

                    b.HasIndex("StudentId");

                    b.HasIndex("TeacherId");

                    b.ToTable("AnamneseValidations");
                });

            modelBuilder.Entity("dentalhub_api.Models.Atm", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int?>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("CurrentValidationId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("EndedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Index")
                        .HasColumnType("text");

                    b.Property<int?>("PatientId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CurrentValidationId");

                    b.HasIndex("PatientId");

                    b.ToTable("Atms");
                });

            modelBuilder.Entity("dentalhub_api.Models.AtmAnswer", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int?>("Id"));

                    b.Property<int?>("AtmId")
                        .HasColumnType("integer");

                    b.Property<string>("Content")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool?>("Highlight")
                        .HasColumnType("boolean");

                    b.Property<string>("Question")
                        .HasColumnType("text");

                    b.Property<int?>("ValidationId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("AtmId");

                    b.HasIndex("ValidationId");

                    b.ToTable("AtmAnswers");
                });

            modelBuilder.Entity("dentalhub_api.Models.AtmValidation", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int?>("Id"));

                    b.Property<int>("AtmId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Feedback")
                        .HasColumnType("text");

                    b.Property<int?>("Status")
                        .HasColumnType("integer");

                    b.Property<int>("StudentId")
                        .HasColumnType("integer");

                    b.Property<int>("TeacherId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("AtmId");

                    b.HasIndex("StudentId");

                    b.HasIndex("TeacherId");

                    b.ToTable("AtmValidations");
                });

            modelBuilder.Entity("dentalhub_api.Models.ChronologicalPlan", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int?>("Id"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("EndedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("LastStudentEditId")
                        .HasColumnType("integer");

                    b.Property<int>("TreatmentId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("LastStudentEditId");

                    b.HasIndex("TreatmentId");

                    b.ToTable("ChronologicalPlans");
                });

            modelBuilder.Entity("dentalhub_api.Models.ChronologicalPlanValidation", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int?>("Id"));

                    b.Property<int>("AttachmentId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("EndedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Feedback")
                        .HasColumnType("text");

                    b.Property<int?>("Status")
                        .HasColumnType("integer");

                    b.Property<int>("StudentId")
                        .HasColumnType("integer");

                    b.Property<int>("TeacherId")
                        .HasColumnType("integer");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("AttachmentId");

                    b.HasIndex("StudentId");

                    b.HasIndex("TeacherId");

                    b.ToTable("ChronologicalPlanValidations");
                });

            modelBuilder.Entity("dentalhub_api.Models.Clinic", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Clinics");
                });

            modelBuilder.Entity("dentalhub_api.Models.Exam", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int?>("Id"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("EndedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("LastStudentEditId")
                        .HasColumnType("integer");

                    b.Property<int>("TreatmentId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("LastStudentEditId");

                    b.HasIndex("TreatmentId");

                    b.ToTable("Exams");
                });

            modelBuilder.Entity("dentalhub_api.Models.FrontDesk", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int?>("Id"));

                    b.Property<int>("ClinicId")
                        .HasColumnType("integer");

                    b.Property<string>("Cpf")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Telephone")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("ClinicId");

                    b.ToTable("FrontDesks");
                });

            modelBuilder.Entity("dentalhub_api.Models.PainDraw", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int?>("Id"));

                    b.Property<int>("AtmId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("EndedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("LastStudentEditId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AtmId");

                    b.HasIndex("LastStudentEditId");

                    b.ToTable("PainDraws");
                });

            modelBuilder.Entity("dentalhub_api.Models.PainDrawValidation", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int?>("Id"));

                    b.Property<int>("AttachmentId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("EndedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Feedback")
                        .HasColumnType("text");

                    b.Property<int?>("Status")
                        .HasColumnType("integer");

                    b.Property<int>("StudentId")
                        .HasColumnType("integer");

                    b.Property<int>("TeacherId")
                        .HasColumnType("integer");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("AttachmentId");

                    b.HasIndex("StudentId");

                    b.HasIndex("TeacherId");

                    b.ToTable("PainDrawValidations");
                });

            modelBuilder.Entity("dentalhub_api.Models.Patient", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int?>("Id"));

                    b.Property<int?>("AddressId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(21)
                        .HasColumnType("character varying(21)");

                    b.Property<int>("EthnicGroup")
                        .HasColumnType("integer");

                    b.Property<int>("Gender")
                        .HasColumnType("integer");

                    b.Property<bool?>("IsDependent")
                        .HasColumnType("boolean");

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Nationality")
                        .HasColumnType("text");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("SusNationalCard")
                        .HasColumnType("text");

                    b.Property<string>("SusRegionalCard")
                        .HasColumnType("text");

                    b.Property<string>("Token")
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.ToTable("Patient");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Patient");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("dentalhub_api.Models.PeriodontalChart", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int?>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("EndedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("LastStudentEditId")
                        .HasColumnType("integer");

                    b.Property<int?>("PatientId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("LastStudentEditId");

                    b.HasIndex("PatientId");

                    b.ToTable("PeriodontalCharts");
                });

            modelBuilder.Entity("dentalhub_api.Models.PeriodontalChartValidation", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int?>("Id"));

                    b.Property<int>("AttachmentId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("EndedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Feedback")
                        .HasColumnType("text");

                    b.Property<int?>("Status")
                        .HasColumnType("integer");

                    b.Property<int>("StudentId")
                        .HasColumnType("integer");

                    b.Property<int>("TeacherId")
                        .HasColumnType("integer");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("AttachmentId");

                    b.HasIndex("StudentId");

                    b.HasIndex("TeacherId");

                    b.ToTable("PeriodontalChartValidations");
                });

            modelBuilder.Entity("dentalhub_api.Models.Presence", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int?>("Id"));

                    b.Property<int>("ClinicId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("Exit")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("FrontdeskId")
                        .HasColumnType("integer");

                    b.Property<bool?>("IsEmergency")
                        .HasColumnType("boolean");

                    b.Property<int>("PatientId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("ClinicId");

                    b.HasIndex("FrontdeskId");

                    b.HasIndex("PatientId");

                    b.ToTable("Presences");
                });

            modelBuilder.Entity("dentalhub_api.Models.Responsible", b =>
                {
                    b.Property<int?>("ResponsibleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int?>("ResponsibleId"));

                    b.Property<int>("PatientId")
                        .HasColumnType("integer");

                    b.Property<int>("RegularPatientId")
                        .HasColumnType("integer");

                    b.HasKey("ResponsibleId");

                    b.HasIndex("PatientId");

                    b.HasIndex("RegularPatientId");

                    b.ToTable("Responsibles");
                });

            modelBuilder.Entity("dentalhub_api.Models.Screening", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int?>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("CurrentValidationId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("EndedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Index")
                        .HasColumnType("text");

                    b.Property<int?>("PatientId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CurrentValidationId");

                    b.HasIndex("PatientId");

                    b.ToTable("Screenings");
                });

            modelBuilder.Entity("dentalhub_api.Models.ScreeningAnswer", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int?>("Id"));

                    b.Property<string>("Content")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool?>("Highlight")
                        .HasColumnType("boolean");

                    b.Property<string>("Question")
                        .HasColumnType("text");

                    b.Property<int?>("ScreeningId")
                        .HasColumnType("integer");

                    b.Property<int?>("ValidationId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ScreeningId");

                    b.HasIndex("ValidationId");

                    b.ToTable("ScreeningAnswers");
                });

            modelBuilder.Entity("dentalhub_api.Models.ScreeningValidation", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int?>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Feedback")
                        .HasColumnType("text");

                    b.Property<int>("ScreeningId")
                        .HasColumnType("integer");

                    b.Property<int?>("Status")
                        .HasColumnType("integer");

                    b.Property<int>("StudentId")
                        .HasColumnType("integer");

                    b.Property<int>("TeacherId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ScreeningId");

                    b.HasIndex("StudentId");

                    b.HasIndex("TeacherId");

                    b.ToTable("ScreeningValidations");
                });

            modelBuilder.Entity("dentalhub_api.Models.Term", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int?>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("PatientId")
                        .HasColumnType("integer");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Url")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("PatientId");

                    b.ToTable("Terms");
                });

            modelBuilder.Entity("dentalhub_api.Models.Treatment", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int?>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("EndedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int?>("PatientId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("PatientId");

                    b.ToTable("Treatments");
                });

            modelBuilder.Entity("dentalhub_api.Models.PediatricPatient", b =>
                {
                    b.HasBaseType("dentalhub_api.Models.Patient");

                    b.Property<string>("SchoolName")
                        .HasColumnType("text");

                    b.Property<string>("SchoolSeries")
                        .HasColumnType("text");

                    b.Property<int?>("SchoolShift")
                        .HasColumnType("integer");

                    b.HasDiscriminator().HasValue("PediatricPatient");
                });

            modelBuilder.Entity("dentalhub_api.Models.RegularPatient", b =>
                {
                    b.HasBaseType("dentalhub_api.Models.Patient");

                    b.Property<int>("CivilStatus")
                        .HasColumnType("integer");

                    b.Property<int?>("ComercialAddressId")
                        .HasColumnType("integer");

                    b.Property<string>("Cpf")
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<string>("ExpeditionRG")
                        .HasColumnType("text");

                    b.Property<string>("FatherName")
                        .HasColumnType("text");

                    b.Property<string>("MotherName")
                        .HasColumnType("text");

                    b.Property<string>("Occupation")
                        .HasColumnType("text");

                    b.Property<string>("Phone")
                        .HasColumnType("text");

                    b.Property<string>("Recommendation")
                        .HasColumnType("text");

                    b.Property<string>("Rg")
                        .HasColumnType("text");

                    b.HasIndex("ComercialAddressId");

                    b.HasDiscriminator().HasValue("RegularPatient");
                });

            modelBuilder.Entity("dentalhub_api.Models.Affiliated", b =>
                {
                    b.HasOne("dentalhub_api.Models.Anamnese", null)
                        .WithMany("Affiliateds")
                        .HasForeignKey("AnamneseId");

                    b.HasOne("dentalhub_api.Models.Atm", null)
                        .WithMany("Affiliateds")
                        .HasForeignKey("AtmId");

                    b.HasOne("dentalhub_api.Models.Screening", null)
                        .WithMany("Affiliateds")
                        .HasForeignKey("ScreeningId");

                    b.HasOne("dentalhub_api.Models.Treatment", null)
                        .WithMany("Affiliateds")
                        .HasForeignKey("TreatmentId");
                });

            modelBuilder.Entity("dentalhub_api.Models.Anamnese", b =>
                {
                    b.HasOne("dentalhub_api.Models.AnamneseValidation", "CurrentValidation")
                        .WithMany()
                        .HasForeignKey("CurrentValidationId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("dentalhub_api.Models.Patient", "Patient")
                        .WithMany("Anamneses")
                        .HasForeignKey("PatientId");

                    b.Navigation("CurrentValidation");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("dentalhub_api.Models.AnamneseAnswer", b =>
                {
                    b.HasOne("dentalhub_api.Models.Anamnese", "Anamnese")
                        .WithMany()
                        .HasForeignKey("AnamneseId");

                    b.HasOne("dentalhub_api.Models.AnamneseValidation", "Validation")
                        .WithMany("Answers")
                        .HasForeignKey("ValidationId");

                    b.Navigation("Anamnese");

                    b.Navigation("Validation");
                });

            modelBuilder.Entity("dentalhub_api.Models.AnamneseValidation", b =>
                {
                    b.HasOne("dentalhub_api.Models.Anamnese", "Anamnese")
                        .WithMany("Validations")
                        .HasForeignKey("AnamneseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("dentalhub_api.Models.Affiliated", "Student")
                        .WithMany()
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("dentalhub_api.Models.Affiliated", "Teacher")
                        .WithMany()
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Anamnese");

                    b.Navigation("Student");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("dentalhub_api.Models.Atm", b =>
                {
                    b.HasOne("dentalhub_api.Models.AtmValidation", "CurrentValidation")
                        .WithMany()
                        .HasForeignKey("CurrentValidationId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("dentalhub_api.Models.Patient", "Patient")
                        .WithMany("Atms")
                        .HasForeignKey("PatientId");

                    b.Navigation("CurrentValidation");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("dentalhub_api.Models.AtmAnswer", b =>
                {
                    b.HasOne("dentalhub_api.Models.Atm", "Atm")
                        .WithMany()
                        .HasForeignKey("AtmId");

                    b.HasOne("dentalhub_api.Models.AtmValidation", "Validation")
                        .WithMany("Answers")
                        .HasForeignKey("ValidationId");

                    b.Navigation("Atm");

                    b.Navigation("Validation");
                });

            modelBuilder.Entity("dentalhub_api.Models.AtmValidation", b =>
                {
                    b.HasOne("dentalhub_api.Models.Atm", "Atm")
                        .WithMany("Validations")
                        .HasForeignKey("AtmId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("dentalhub_api.Models.Affiliated", "Student")
                        .WithMany()
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("dentalhub_api.Models.Affiliated", "Teacher")
                        .WithMany()
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Atm");

                    b.Navigation("Student");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("dentalhub_api.Models.ChronologicalPlan", b =>
                {
                    b.HasOne("dentalhub_api.Models.Affiliated", "LastStudentEdit")
                        .WithMany()
                        .HasForeignKey("LastStudentEditId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("dentalhub_api.Models.Treatment", "Treatment")
                        .WithMany("ChronologicalPlans")
                        .HasForeignKey("TreatmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LastStudentEdit");

                    b.Navigation("Treatment");
                });

            modelBuilder.Entity("dentalhub_api.Models.ChronologicalPlanValidation", b =>
                {
                    b.HasOne("dentalhub_api.Models.ChronologicalPlan", "Attachment")
                        .WithMany()
                        .HasForeignKey("AttachmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("dentalhub_api.Models.Affiliated", "Student")
                        .WithMany()
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("dentalhub_api.Models.Affiliated", "Teacher")
                        .WithMany()
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Attachment");

                    b.Navigation("Student");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("dentalhub_api.Models.Exam", b =>
                {
                    b.HasOne("dentalhub_api.Models.Affiliated", "LastStudentEdit")
                        .WithMany()
                        .HasForeignKey("LastStudentEditId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("dentalhub_api.Models.Treatment", "Treatment")
                        .WithMany("Exams")
                        .HasForeignKey("TreatmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LastStudentEdit");

                    b.Navigation("Treatment");
                });

            modelBuilder.Entity("dentalhub_api.Models.FrontDesk", b =>
                {
                    b.HasOne("dentalhub_api.Models.Clinic", "Clinic")
                        .WithMany()
                        .HasForeignKey("ClinicId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Clinic");
                });

            modelBuilder.Entity("dentalhub_api.Models.PainDraw", b =>
                {
                    b.HasOne("dentalhub_api.Models.Atm", "Atm")
                        .WithMany("PainDraws")
                        .HasForeignKey("AtmId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("dentalhub_api.Models.Affiliated", "LastStudentEdit")
                        .WithMany()
                        .HasForeignKey("LastStudentEditId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Atm");

                    b.Navigation("LastStudentEdit");
                });

            modelBuilder.Entity("dentalhub_api.Models.PainDrawValidation", b =>
                {
                    b.HasOne("dentalhub_api.Models.PainDraw", "Attachment")
                        .WithMany()
                        .HasForeignKey("AttachmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("dentalhub_api.Models.Affiliated", "Student")
                        .WithMany()
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("dentalhub_api.Models.Affiliated", "Teacher")
                        .WithMany()
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Attachment");

                    b.Navigation("Student");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("dentalhub_api.Models.Patient", b =>
                {
                    b.HasOne("dentalhub_api.Models.Address", "Address")
                        .WithMany("Patients")
                        .HasForeignKey("AddressId");

                    b.Navigation("Address");
                });

            modelBuilder.Entity("dentalhub_api.Models.PeriodontalChart", b =>
                {
                    b.HasOne("dentalhub_api.Models.Affiliated", "LastStudentEdit")
                        .WithMany()
                        .HasForeignKey("LastStudentEditId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("dentalhub_api.Models.Patient", "Patient")
                        .WithMany("PeriodontalCharts")
                        .HasForeignKey("PatientId");

                    b.Navigation("LastStudentEdit");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("dentalhub_api.Models.PeriodontalChartValidation", b =>
                {
                    b.HasOne("dentalhub_api.Models.PeriodontalChart", "Attachment")
                        .WithMany()
                        .HasForeignKey("AttachmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("dentalhub_api.Models.Affiliated", "Student")
                        .WithMany()
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("dentalhub_api.Models.Affiliated", "Teacher")
                        .WithMany()
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Attachment");

                    b.Navigation("Student");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("dentalhub_api.Models.Presence", b =>
                {
                    b.HasOne("dentalhub_api.Models.Clinic", "Clinic")
                        .WithMany()
                        .HasForeignKey("ClinicId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("dentalhub_api.Models.FrontDesk", "FrontDesk")
                        .WithMany()
                        .HasForeignKey("FrontdeskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("dentalhub_api.Models.Patient", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Clinic");

                    b.Navigation("FrontDesk");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("dentalhub_api.Models.Responsible", b =>
                {
                    b.HasOne("dentalhub_api.Models.Patient", "Patient")
                        .WithMany("Responsible")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("dentalhub_api.Models.RegularPatient", "RegularPatient")
                        .WithMany()
                        .HasForeignKey("RegularPatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Patient");

                    b.Navigation("RegularPatient");
                });

            modelBuilder.Entity("dentalhub_api.Models.Screening", b =>
                {
                    b.HasOne("dentalhub_api.Models.ScreeningValidation", "CurrentValidation")
                        .WithMany()
                        .HasForeignKey("CurrentValidationId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("dentalhub_api.Models.Patient", "Patient")
                        .WithMany("Screenings")
                        .HasForeignKey("PatientId");

                    b.Navigation("CurrentValidation");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("dentalhub_api.Models.ScreeningAnswer", b =>
                {
                    b.HasOne("dentalhub_api.Models.Screening", "Screening")
                        .WithMany()
                        .HasForeignKey("ScreeningId");

                    b.HasOne("dentalhub_api.Models.ScreeningValidation", "Validation")
                        .WithMany("Answers")
                        .HasForeignKey("ValidationId");

                    b.Navigation("Screening");

                    b.Navigation("Validation");
                });

            modelBuilder.Entity("dentalhub_api.Models.ScreeningValidation", b =>
                {
                    b.HasOne("dentalhub_api.Models.Screening", "Screening")
                        .WithMany("Validations")
                        .HasForeignKey("ScreeningId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("dentalhub_api.Models.Affiliated", "Student")
                        .WithMany()
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("dentalhub_api.Models.Affiliated", "Teacher")
                        .WithMany()
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Screening");

                    b.Navigation("Student");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("dentalhub_api.Models.Term", b =>
                {
                    b.HasOne("dentalhub_api.Models.Patient", "Patient")
                        .WithMany("Terms")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("dentalhub_api.Models.Treatment", b =>
                {
                    b.HasOne("dentalhub_api.Models.Patient", "Patient")
                        .WithMany("Treatments")
                        .HasForeignKey("PatientId");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("dentalhub_api.Models.RegularPatient", b =>
                {
                    b.HasOne("dentalhub_api.Models.Address", "ComercialAddress")
                        .WithMany()
                        .HasForeignKey("ComercialAddressId");

                    b.Navigation("ComercialAddress");
                });

            modelBuilder.Entity("dentalhub_api.Models.Address", b =>
                {
                    b.Navigation("Patients");
                });

            modelBuilder.Entity("dentalhub_api.Models.Anamnese", b =>
                {
                    b.Navigation("Affiliateds");

                    b.Navigation("Validations");
                });

            modelBuilder.Entity("dentalhub_api.Models.AnamneseValidation", b =>
                {
                    b.Navigation("Answers");
                });

            modelBuilder.Entity("dentalhub_api.Models.Atm", b =>
                {
                    b.Navigation("Affiliateds");

                    b.Navigation("PainDraws");

                    b.Navigation("Validations");
                });

            modelBuilder.Entity("dentalhub_api.Models.AtmValidation", b =>
                {
                    b.Navigation("Answers");
                });

            modelBuilder.Entity("dentalhub_api.Models.Patient", b =>
                {
                    b.Navigation("Anamneses");

                    b.Navigation("Atms");

                    b.Navigation("PeriodontalCharts");

                    b.Navigation("Responsible");

                    b.Navigation("Screenings");

                    b.Navigation("Terms");

                    b.Navigation("Treatments");
                });

            modelBuilder.Entity("dentalhub_api.Models.Screening", b =>
                {
                    b.Navigation("Affiliateds");

                    b.Navigation("Validations");
                });

            modelBuilder.Entity("dentalhub_api.Models.ScreeningValidation", b =>
                {
                    b.Navigation("Answers");
                });

            modelBuilder.Entity("dentalhub_api.Models.Treatment", b =>
                {
                    b.Navigation("Affiliateds");

                    b.Navigation("ChronologicalPlans");

                    b.Navigation("Exams");
                });
#pragma warning restore 612, 618
        }
    }
}
